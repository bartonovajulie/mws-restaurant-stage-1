let restaurant;var newMap;document.addEventListener('DOMContentLoaded',(event)=>{initMap()});window.addEventListener('offline',()=>{console.log('App is offline')});window.addEventListener('online',()=>{console.log('App is online');DBHelper.sendReviewsToServer()});initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error){console.error(error)}else{self.newMap=L.map('map',{center:[restaurant.latlng.lat,restaurant.latlng.lng],zoom:16,scrollWheelZoom:!1});L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}',{mapboxToken:'pk.eyJ1IjoianVsYmFycyIsImEiOiJjamo2b2F1cDQwZ3R6M3F0ZWI5Mml5ZmVrIn0.GYzP56ZNJiXR8w_qNNO5BA',maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, '+'<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, '+'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:'mapbox.streets'}).addTo(newMap);fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap)}})}
fetchRestaurantFromURL=(callback)=>{if(self.restaurant){callback(null,self.restaurant)
    return}
    const id=getParameterByName('id');if(!id){error='No restaurant id in URL';callback(error,null)}else{DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return}
        DBHelper.fetchReviews(id,(error,reviews)=>{let currentReviews=[];self.restaurant.reviews=[];reviews.forEach(review=>{if(review.restaurant_id===parseInt(id)){currentReviews.push(review)}});self.restaurant.reviews=currentReviews;if(!currentReviews){console.error(error)}
            fillRestaurantHTML();callback(null,restaurant)})})}};fillRestaurantHTML=(restaurant=self.restaurant)=>{const name=document.getElementById('restaurant-name');name.innerHTML=restaurant.name;const address=document.getElementById('restaurant-address');address.innerHTML=restaurant.address;const image=document.getElementById('restaurant-img');image.className='restaurant-img';image.alt=restaurant.name;image.src=DBHelper.imageUrlForRestaurant(restaurant)+'.jpg';if(image.src.includes('undefined')){document.getElementById('restaurant-img').remove()}
    const cuisine=document.getElementById('restaurant-cuisine');cuisine.innerHTML=restaurant.cuisine_type;if(restaurant.operating_hours){fillRestaurantHoursHTML()}
    fillReviewsHTML()}
fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById('restaurant-hours');for(let key in operatingHours){const row=document.createElement('tr');const day=document.createElement('td');day.innerHTML=key;row.appendChild(day);const time=document.createElement('td');time.innerHTML=operatingHours[key];row.appendChild(time);hours.appendChild(row)}}
fillReviewsHTML=(reviews=self.restaurant.reviews)=>{const container=document.getElementById('reviews-container');const title=document.createElement('h2');title.innerHTML='Reviews';container.appendChild(title);if(!reviews){const noReviews=document.createElement('p');noReviews.innerHTML='No reviews yet!';container.appendChild(noReviews);return}
    const ul=document.getElementById('reviews-list');reviews.forEach(review=>{ul.appendChild(createReviewHTML(review))});container.appendChild(ul);submitReview()}
createReviewHTML=(review)=>{const li=document.createElement('li');const name=document.createElement('p');name.innerHTML=review.name;li.appendChild(name);const date=document.createElement('p');date.innerHTML=new Date(review.updatedAt).toDateString();li.appendChild(date);const rating=document.createElement('p');rating.innerHTML=`Rating: ${review.rating}`;li.appendChild(rating);const comments=document.createElement('p');comments.innerHTML=review.comments;li.appendChild(comments);return li}
submitReview=()=>{const form=document.getElementById('review-form-el');form.addEventListener('submit',(e)=>{e.preventDefault();let newReview={restaurant_id:self.restaurant.id,name:document.getElementById('name').value,createdAt:new Date(),updatedAt:new Date(),rating:parseInt(document.getElementById('rating').value),comments:document.getElementById('comments').value};if(newReview.name===''||newReview.comments===''){alert('Fields have to be filled out.');return}
    document.getElementById('reviews-list').appendChild(createReviewHTML(newReview));DBHelper.creatNewReview(newReview);form.reset()})};fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById('breadcrumb');const li=document.createElement('li');li.innerHTML=restaurant.name;li.setAttribute('aria-current','page');breadcrumb.appendChild(li)}
getParameterByName=(name,url)=>{if(!url)
    url=window.location.href;name=name.replace(/[\[\]]/g,'\\$&');const regex=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),results=regex.exec(url);if(!results)
    return null;if(!results[2])
    return'';return decodeURIComponent(results[2].replace(/\+/g,' '))}